from typing import Optional


class Node:
    def __init__(self, data=None):
        self.data = data
        self.next: Optional["Node"] = None


class LinkedList:
    def __init__(self):
        self.head = None

    # –í—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # –í—Å—Ç–∞–≤–∫–∞ –≤ –∫—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            cur = self.head
            while cur.next:
                cur = cur.next
            cur.next = new_node

    # –í—Å—Ç–∞–≤–∫–∞ –ø—ñ—Å–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –≤—É–∑–ª–∞
    def insert_after(self, prev_node: Optional[Node], data):
        if prev_node is None:
            print("–ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤—É–∑–ª–∞ –Ω–µ —ñ—Å–Ω—É—î.")
            return
        new_node = Node(data)
        new_node.next = prev_node.next
        prev_node.next = new_node

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—É–∑–ª–∞ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º
    def delete_node(self, key: int):
        cur = self.head
        if cur and cur.data == key:
            self.head = cur.next
            return
        prev = None
        while cur and cur.data != key:
            prev = cur
            cur = cur.next
        if cur is None:
            return
        prev.next = cur.next

    # –ü–æ—à—É–∫ –≤—É–∑–ª–∞ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º
    def search_element(self, data: int) -> Node | None:
        cur = self.head
        while cur:
            if cur.data == data:
                return cur
            cur = cur.next
        return None

    # –î—Ä—É–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É
    def print_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

    # ‚úÖ 1. –†–µ–≤–µ—Ä—Å—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    # ‚úÖ 2. –î–æ–ø–æ–º—ñ–∂–Ω–∞: –ø–æ—à—É–∫ —Å–µ—Ä–µ–¥–∏–Ω–∏ —Å–ø–∏—Å–∫—É
    def _get_middle(self, head):
        if not head:
            return head
        slow = head
        fast = head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow

    # ‚úÖ 2. –î–æ–ø–æ–º—ñ–∂–Ω–∞: –∑–ª–∏—Ç—Ç—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    def _sorted_merge(self, left, right):
        if not left:
            return right
        if not right:
            return left

        if left.data <= right.data:
            result = left
            result.next = self._sorted_merge(left.next, right)
        else:
            result = right
            result.next = self._sorted_merge(left, right.next)
        return result

    # ‚úÖ 2. –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–ª–∏—Ç—Ç—è–º (merge sort)
    def _merge_sort(self, head):
        if not head or not head.next:
            return head
        middle = self._get_middle(head)
        next_to_middle = middle.next
        middle.next = None

        left = self._merge_sort(head)
        right = self._merge_sort(next_to_middle)

        return self._sorted_merge(left, right)

    # –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    def sort(self):
        self.head = self._merge_sort(self.head)

    # ‚úÖ 3. –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    @staticmethod
    def merge_sorted_lists(list1, list2):
        dummy = Node()
        tail = dummy
        a = list1.head
        b = list2.head

        while a and b:
            if a.data <= b.data:
                tail.next = a
                a = a.next
            else:
                tail.next = b
                b = b.next
            tail = tail.next

        tail.next = a if a else b

        merged = LinkedList()
        merged.head = dummy.next
        return merged


# –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫
llist = LinkedList()
llist.insert_at_beginning(5)
llist.insert_at_beginning(10)
llist.insert_at_beginning(15)
llist.insert_at_end(20)
llist.insert_at_end(25)

print("üìã –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫:")
llist.print_list()

llist.reverse()
print("\nüîÅ –†–µ–≤–µ—Ä—Å–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫:")
llist.print_list()

# –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
llist.sort()
print("\nüìä –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫:")
llist.print_list()

# –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
list1 = LinkedList()
list2 = LinkedList()
for x in [1, 4, 7]:
    list1.insert_at_end(x)
for y in [2, 3, 6, 9]:
    list2.insert_at_end(y)

merged = LinkedList.merge_sorted_lists(list1, list2)
print("\nüîó –û–±'—î–¥–Ω–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫:")
merged.print_list()
